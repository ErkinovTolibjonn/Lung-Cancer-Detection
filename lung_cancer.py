# -*- coding: utf-8 -*-
"""Lung Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NGI4YuFUNXkcCPWIRc2sqD2X7Ud0oM2X
"""

import pandas as pd

import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploader = files.upload()

df = pd.read_csv('lung_cancer_examples.csv')

df.head()

df.info()

df.select_dtypes(include='object').head()

df = df.drop(['Name','Surname'],axis = 1)

df.info()

df.head()

df.isnull().any()

df.isnull().sum()

df.describe()

import seaborn as sns
import matplotlib.pyplot as plt

sns.set_style("whitegrid")
sns.pairplot(df,hue = 'Result')
plt.title("pair plot of data")
plt.show()

sns.heatmap(df.corr(),annot=True)
plt.title('heatmap of correlation')
plt.show()

df.columns

fig,ax = plt.subplots(5,figsize = (7,25))
index = 0
all_columns = ['Age', 'Smokes', 'AreaQ', 'Alkhol', 'Result']

for column in all_columns:
  ax[index].hist(df[column])
  ax[index].set_title('histogram of '+ column)
  index += 1
plt.tight_layout()

x = df.drop(['Result'],axis = 1)
y = df['Result']

print(x.shape)
print(y.shape)

x.head()

y.head()

# Train, test & split
from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()
lr.fit(x_train, y_train)

import numpy as np

predict = lr.predict(x_test).reshape(-1,1)

score = lr.score(x_test, y_test)
print(score)

from sklearn import metrics

cm = metrics.confusion_matrix(y_test, predict)
print(cm)

plt.figure(figsize=(5,5))
sns.heatmap(cm,annot = True)
plt.ylabel('Actual label')
plt.title('Logistic Regression Classification Confusion Matrix')
plt.show()

from sklearn.neighbors import KNeighborsClassifier

knncla = KNeighborsClassifier()
knncla.fit(x_train,y_train)

import numpy as np

pred_1 = knncla.predict(x_test).reshape(-1,1)

cm1 = metrics.confusion_matrix(y_test,pred_1)
print(cm1)

plt.figure(figsize=(5,5))
sns.heatmap(cm1,annot = True)
plt.xlabel('Prediction label')
plt.ylabel('Actual label')
plt.title('KNeighborsClassifier Classification Confusion Matrix')
plt.show()

knnscore = knncla.score(x_test,y_test)
print(knnscore)

fig = plt.figure(figsize=(15,15))
ax1 = fig.add_subplot(3, 3, 1) 
ax1.set_title('Logistic Regression Classification') 
ax2 = fig.add_subplot(3, 3, 2) 
ax2.set_title('KNeighborsClassifier Classification')
sns.heatmap(cm,annot=True,ax = ax1)
sns.heatmap(cm1,annot=True,ax = ax2)
plt.show()

